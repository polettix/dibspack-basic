#!/usr/bin/env perl
use strict;
use warnings;
use Getopt::Long qw< GetOptionsFromArray :config gnu_getopt >;
use FindBin '$Bin';
use lib "$Bin/lib";
use Text::Gitignore 'build_gitignore_matcher';
use Path::Tiny 'path';

main(@ARGV);
exit 0;

{
   my %config;

   # these work as "use constant", to access the configuration globally
   # while still avoiding a fully global configuration variable.
   sub DEBUG()    { return $config{debug}    }
   sub PRESERVE() { return $config{preserve} }
   sub PRINT()    { return $config{print}    }

   sub main {

      my @args = @_;
      import_enviles('.');
      my ($src_dir, $cache_dir, $env_dir) =
         @ENV{qw< DIBS_DIR_SRC DIBS_DIR_CACHE DIBS_DIR_ENV >};

      %config = (
         debug      => $ENV{DIBSPACK_INSTALL_DEBUG}      || 0,
         dibsignore => $ENV{DIBSPACK_INSTALL_DIBSIGNORE} || '.dibsignore',
         dst        => $ENV{DIBSPACK_INSTALL_DST},
         preserve   => $ENV{DIBSPACK_INSTALL_PRESERVE}   || 0,
         'print'    => $ENV{DIBSPACK_INSTALL_PRINT}      || 0,
         src        => $ENV{DIBSPACK_INSTALL_SRC},
      );
      GetOptionsFromArray(\@args, \%config, qw< debug|D! dibsignore|f=s
         dst|d=s preserve|p! print|P! src|s=s >);

      die "unknown parameters (@args)" if scalar(@args) > 1;
      my $step = scalar(@args)          ? $args[0]
         : defined($ENV{DIBSPACK_STEP}) ? $ENV{DIBSPACK_STEP}
         : defined($ENV{DIBS_STEP})     ? $ENV{DIBS_STEP}
         :                                undef;
      if ((! defined $step) || (! length $step)) {
         $config{src} = default_value($config{src}, $src_dir);
         $config{dst} = default_value($config{dst}, '/app');
      }
      elsif ($step eq 'build') {
         $config{src} = default_value($config{src}, $src_dir);
         $config{dst} = default_value($config{dst},
            path($cache_dir, 'app')->stringify);
      }
      elsif ($step eq 'bundle') {
         $config{src} = default_value($config{src},
            path($cache_dir, 'app')->stringify);
         $config{dst} = default_value($config{dst}, '/app');
      }
      else { # just like not defined...
         warn "no defaults for step '$step', ignoring\n";
         $config{src} = default_value($config{src}, $src_dir);
         $config{dst} = default_value($config{dst}, '/app');
      }

      my ($dst, $src) = map { path($_)->absolute } @config{qw< dst src >};

      # get rid of destination first
      if (! PRINT) {
         stubborn_rm_rf($dst) if $dst->exists && ! PRESERVE;
         $dst->mkpath;
      }

      # now do the copy itself
      traverse(
         dibsignore => $config{dibsignore},
         src_root   => $src,
         dst_root   => $dst,
         root       => $src,
      );

      # last, copy permissions for top directory
      copy_permissions($src, $dst);
   }
}

sub import_enviles {
   my $env_dir = path(shift);
   for my $file ($env_dir->children) {
      next unless $file->is_file;
      my $key = $file->basename;
      next unless $key =~ m{\A DIBS }mxs;
      next if exists $ENV{$key};
      $ENV{$key} = $file->slurp_raw;
   }
}

sub default_value {
   my ($main, $default) = @_;
   return $main if defined($main) && length($main);
   return $default;
}

sub stubborn_rm_rf {
   my $root = shift;
   $root->chmod('u+rwx');
   for my $child ($root->children) {
      if    (-l $child) { $child->remove }
      elsif (-d $child) { stubborn_rm_rf($child) }
      else {
         $child->chmod('u+rw');
         $child->remove;
      }
   }
   $root->remove_tree;
}

sub traverse {
   my %args = @_;
   my @mcs = @{$args{mcs} || []};
   my $root = $args{root};
   plog("traversing '$root'");
   my $di = $root->child($args{dibsignore});
   push @mcs, [$root, build_gitignore_matcher([$di->lines({chomp => 1})])]
      if $di->exists;
   FILE:
   for my $src ($root->children) {
      my $rel = $src->relative($args{src_root});

      for my $m (@mcs) {
         my ($matcher_root, $matcher) = @$m;
         if ($matcher->($src->relative($matcher_root))) {
            plog("ignoring '$rel'");
            next FILE;
         }
      }

      my $dst = $args{dst_root}->child($rel);
      if ($src->is_dir && ! -l $src) {
         $dst->mkpath unless PRINT;
         traverse(%args, mcs => \@mcs, root => $src);
         copy_permissions($src, $dst);
      }
      else {
         plog("cp $src $dst");
         if (PRINT) {
            print {*STDOUT} $rel, "\n";
         }
         else {
            copy($src, $dst);
         }
      }
   }
   return;
}

sub copy_permissions {
   my ($src, $dst) = @_;
   return if PRINT;
   my $srcstat = $src->stat;
   chmod $srcstat->mode, $dst;
   chown $srcstat->uid, $srcstat->gid, $dst;
}

sub copy {
   my ($src, $dst) = @_;
   if (-f $src) { # plain file
      $src->copy($dst);
      copy_permissions($src, $dst);
   }
   elsif (-l $src) { # symbolic link
      symlink readlink($src), $dst;
   }
   else {
      die(
         (-p $src) ? "unsupported copy of a named pipe\n"
       : (-S $src) ? "unsupported copy of a socket\n"
       : (-b $src) ? "unsupported copy of a block special file\n"
       : (-c $src) ? "unsupported copy of a character special file\n"
       :             "unsupported copy of an unknown type of file\n"
      );
   }
   return;
}

sub plog { print {*STDERR} "@_\n" if DEBUG }
