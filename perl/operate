#!/bin/sh
# vim: ft=sh sw=3 ts=3 sts=3 et ai tw=76 :

main() {
   local step="$1" src_dir="$2" cache_dir="$3/perl" env_dir="$4"
   local md="$(dirname "$0")"

   # fail fast, fail hard, possibly loud
   set -e
   if [ "x$DIBSPACK_VERBOSE" = "x1" ] ; then
      set -x -v
      __main_print_buildpack_details
   fi

   export PATH="$md:$src_dir/local/bin:$src_dir/local/perl/bin:$PATH"
   export PERL5LIB="$src_dir/local/lib/perl5:$PERL5LIB"
   
   # do real build
   copy_local "$cache_dir" "$src_dir"
   build      "$src_dir"
   copy_local "$src_dir" "$cache_dir"

   post_build "$src_dir"

   [ -z "$DIBSPACK_SAVE_ENV" ] \
      || save_build_environment "$src_dir" "$DIBSPACK_SAVE_ENV"

   echo build_complete
}

post_build() {
   local src_dir="$1" pbf="$1/.post_build"
   prepare_run_environment "$src_dir"
   if [[ -f "$pbf" ]] && [[ -x "$pbf" ]] ; then
      INFO "Executing post-build operation"
      "$pbf" "$@"
   fi
}

prepare_run_environment() {
   local profile_dir="$1/.profile.d"
   mkdir -p "$profile_dir"

   # $HOME/local/perl/bin is always added, it might be missing but
   # no harm done
   cat >"$profile_dir/10.perl-env.sh" <<'END'
export PATH="$HOME/bin:$HOME/local/bin:$HOME/local/perl/bin:$PATH"
export PERL5LIB="$HOME/local/lib/perl5:$PERL5LIB"
END

   if [ -n "$BUILDPACK_SET_VERSION" ] ; then
      printf 'export VERSION=%s\n' \
         "$(escape_var_value "$BUILDPACK_SET_VERSION")" \
         >"$profile_dir/20.version-env.sh"
   fi
}

copy_local() {
   local src="$1"
   local dst="$2"
   rm -rf "$dst/local"
   [ ! -d "$src/local" ] || cp -pPR "$src/local" "$dst"
}

build() {
   local src_dir="$1"
   (
      cd "$src_dir"
      mkdir -p local
      __build_install_perl
      __build_install_dependencies
   )
}

########################################################################
__build_install_perl() {
   local flag_file='.perl-archive'

   # revert to system perl if no custom one is requested
   if [ ! -r "$flag_file" ] ; then
      [ -d local/perl ] && __build_install_perl_restore_system_perl
      return 0
   fi

   # if the requested perl did not change... do nothing
   local local_flag_file='local/.perl-archive'
   if diff >/dev/null 2>&1 "$flag_file" "$local_flag_file" ; then
      INFO keeping previous perl
      return 0
   fi

   # remove any previous custom perl, we have to change it anyway
   __build_install_perl_restore_system_perl

   # download and extract new one
   local url="$(cat .perl-archive)"
   echo "getting perl from $url"
   curl -s -L "$url" | tar xzf -

   # move to target place, then make hash-bangs general
   local archive="${url##*/}"
   local version="${archive%.tar*}"
   echo "archive is '$archive', extracted directory '$version'"
   mv "$version" 'local/perl'
   __perl_script_relocate 'local/perl/bin'/*

   # save flag file for comparison in next build
   cp "$flag_file" "$local_flag_file"
}

__build_install_perl_restore_system_perl() {
   echo 'restoring system perl'
   rm -rf local/{bin,lib,perl}
}

__perl_script_relocate() {
   local f
   for f in "$@" ; do
      perl -i -ple 's{^#!.*perl\s*$}{#!/usr/bin/env perl} if $. == 1' "$f"
   done
}

########################################################################
__build_install_dependencies() {
   local save_epan="$epan"
   local epan="$save_epan"

   # epan dirs in "$@", sweep possible DarkPAN candidates and add them
   local _d d
   for _d in epan dpan ; do
      d="$PWD/$_d"
      [ -d "$d" ] || continue
      epan="$epan --mirror $(encode_array_sed "file://$d")"
   done

   # if something was actually found, insist on using mirrors only
   # and make sure www.cpan.org is present but at the end, so that it
   # can be overridden
   if [ -n "$epan" ] ; then
      # append "usual" mirrors and use mirrors for index
      epan="$epan --mirror http://www.cpan.org --mirror-only"
   fi

   # do stuff from gitpan first, because it's not in the records or
   # has to override stuff in the records
   [ -e gitpanfile ] && __build_install_dependencies_gitpanm

   # proceed with regular stuff
   if [ -e cpanfile.snapshot ] ; then
      __build_install_dependencies_carton
   else
      # use cpanm, possibly taking array EPAN in consideration
      __build_install_dependencies_cpanm --installdeps .
   fi
}

__build_install_dependencies_gitpanm() {
   echo "detected gitpanfile"
   local gpm_dir="$src_dir/local/gitpanm"
   mkdir -p "$gpm_dir"

   # iterate through gitpanfile, one line at a time
   cat gitpanfile | while read -r name repo commit ; do

      # skip entries that make no sense
      [ -z "${name%#*}" ] && continue # empty or comment lines

      # "while" subshell here, changing directory remains localized yay!
      cd "$gpm_dir"

      INFO "gitpanfile -> $name $repo $commit"
      [ -d "$name" ] || git clone "$repo" "$name"
      cd "$name"
      git fetch
      if [ -n "$commit" ] ; then
         git checkout "$commit"
      else
         git pull origin "$(git rev-parse --abbrev-ref HEAD)"
      fi

      # recurse for installing this repo's dependencies
      __build_install_dependencies

      # install the very library
      cd "$gpm_dir"
      __build_install_dependencies_cpanm "./$name"
   done
}

__fail_cpanm_log() {
   cat "$HOME"/.cpanm/build.log | sed 's/^/cpanm build.log> /'
   false
}

__build_install_dependencies_carton() {
   local carton=carton
   local private_carton='vendor/bin/carton'
   [ -x "$private_carton" ] && carton="$private_carton"

   local params='install --deployment'
   [ -d 'vendor/cache' ] && params="$params --cached"

   # if we're recurring, chances are that carton will try to install
   # stuff in the wrong place, so we have to attempt something
   if [[ "$(readlink -f "$src_dir")" != "$(readlink -f '.')" ]] ; then
      # try to make "local" point to the *right* local, or cross fingers
      [ -e local ] || ln -s "$src_dir/local"
   fi

   "$carton" $params || __fail_cpanm_log
}

__build_install_dependencies_cpanm() {
   local cpanm=cpanm
   local private_cpanm='vendor/bin/cpanm'
   [ -x "$private_cpanm" ] && cpanm="$private_cpanm"

   # now do the actual installation heavylifting
   "$cpanm"                                 \
      --no-man-pages                        \
      --no-wget                             \
      $CPANM_OPTS                           \
      ${BUILDPACK_CPANM_VERBOSE:-'--quiet'} \
      ${BUILDPACK_CPANM_TEST:-'--notest'}   \
      -l "$src_dir/local"                   \
      $epan                                 \
      "$@"                                  \
      || __fail_cpanm_log
}

########################################################################
__main_print_buildpack_details() {
   echo "environment (sorted)"
   env | sort
   echo ''
   echo "BUILD_DIR [$BUILD_DIR]"
   ls -l "$BUILD_DIR"
   echo "CACHE_DIR [$CACHE_DIR]"
   ls -l "$CACHE_DIR"
   echo "ENV_DIR   [$ENV_DIR]"
   ls -l "$ENV_DIR"
}

save_build_environment() {
   local src_dir="$1"
   local target="$2"
   [ "x${target%${target#?}}" = 'x/' ] || target='/.build_env'
   TARGET="$src_dir$target"
   mkdir -p "$target"
   env > "$target/env.sh"
   set > "$target/set.sh"
}

main "$@"
